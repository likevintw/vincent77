
1. This example is for UNO-420 ad5593r I/O mode testing.

2. The ad5593r driver and iio tools should be installed. 
   To install iio tools for iio device , run
    # sudo apt-get install libiio*

3. To build the examples, run
    # cd libEAPI/example/
    # make

4. Run following command to test AuxIO API and get more usage.
    #./testdl_AuxIO 

   4.1 GPIO Testing :      	
     4.1.1. Set direction of selected GPIO pin :	
       # ./testdl_AuxIO  3  <Id>(0~7)  <Direction>(0:output, 1:input) 

     4.1.2. Get direction of selected GPIO pin :  
       # ./testdl_AuxIO  2  <Id>(0~7) 

     4.1.3. Get GPIO level of selected GPIO pin :
       # ./testdl_AuxIO  4  <Id>(0~7)

     4.1.4. Set GPIO level of selected GPIO pin :	
       # ./testdl_AuxIO  5  <Id>(0~7)  <Level>(1:high, 0:low) 

     4.1.4. Get GPIO direction capability :
       # ./testdl_AuxIO  1  <Id>(0~7)

     4.1.5. Get pins that are currently configured as GPIO functions
       # ./testdl_AuxIO 6      

 	
   4.2 DAC/ADC Testing :
     The output range of the DAC and the input range of the ADC is 0 V to VREF or 0 V to 2 × VREF.Scale is used to select the high range (0~5v) or low range(0~2.5v).The scale computes as 2500mV/2^12 = 0.610351562 or 5000mV/2^12 = 1.220703124.	 
     4.2.1. Show available scales : It is used to show available in_voltage_scale/out_voltage_scale .
       #./testdl_AuxIO F  <Direction>(0:output, 1:input)

     4.2.2. Show current scale : It is used to show current in_voltage_scale/out_voltage_scale to obtain the measured voltage in millivolts.
       #./testdl_AuxIO E  <Direction>(0:output, 1:input) 	 

     4.2.3 Change current scale : It is used to change current in_voltage_scale/out_voltage_scale to obtain the measured voltage in millivolts.
       # ./testdl_AuxIO D  <scale>  <Direction>(0:output, 1:input)
 
     4.2.4 Set specified pin as ADC input and get the input value :
       # ./testdl_AuxIO 9  <Id>(0~7)

     4.2.5 Set specified pin as DAC output and set the output value : 
       # ./testdl_AuxIO B  <Id>(0~7)  <Value> 

     4.2.6 Check specified pin’s current DAC output value setting
       # ./testdl_AuxIO A  <Id>(0~7)

     4.2.7 Get pins that are currently configured as ADC functions : 
       # ./testdl_AuxIO  7 		

     4.2.8 Set pins that are currently configured as DAC functions : 	 
       # ./testdl_AuxIO  8

5. SMBus API example: uno-mxm-info and testdl_smbus
    SMBus examples use EApiSMBReadByte to collect GPU-related information.
    SMBus API only supports UNO-MXM-* devices. These examples have been
    verified with UNO-MXM-CB01.

    5.1 uno-mxm-info 
        # make uno-mxm-info
        # ./uno-mxm-info

        Output format of uno-mxm-info:
        [DATA-ADDRESS] -- [description for retrieved data]: [date retrieved]
        Some information is combined with two bytes, so two address are
        displayed in first column.
    
    5.2 testdl_smbus
        # make testdl_smbus
        # ./testdl_smbus [R/W] [BUSID] [SLAVE-ADDRESS] [DATA-ADDRESS]

        option pattern of testdl_smbus:
                    [R/W]: r(read) or w(write) function
                  [BUSID]: I2C bus ID
          [SLAVE-ADDRESS]: slave address
           [DATA-ADDRESS]: data address

    5.3 Compare results between testdl_smbus and i2c tool.

        5.3.1 install i2c-tools
          # sudo apt-get install -y i2c-tools

        5.3.2 i2cget command format
          i2cget -y [BUSID] [SLAVE-ADDRESS] [DATA-ADDRESS]
        
        5.3.3 results from testdl_smbus and i2cget would be the same
          # ./testdl_smbus r 0 0x4f 0xff
          # i2cget -y 0 0x4f 0xff

